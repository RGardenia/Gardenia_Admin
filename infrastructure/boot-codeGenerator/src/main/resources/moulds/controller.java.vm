package ${package.Controller};

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import jakarta.servlet.http.HttpServletRequest;
import com.alibaba.fastjson.JSONObject;
#if(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import java.util.Arrays;
import ${package.Parent}.utils.Result;
import ${package.Parent}.utils.query.QueryGenerator;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @auther ${author}
 * @create ${date}
 * @describe $!{table.comment}   前端控制器
 */
#if(${swagger})
@Tag(name = "$!{table.comment}")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${entity}, ${table.serviceName}> {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * 分页列表查询
     *
     * @param ${table.entityPath} 列表查询
     * @param pageNo
     * @param pageSize
     * @param req
     * @return
     */
    //@AutoLog(value = "$!{table.comment}-分页列表查询")
    @ApiOperation(value="$!{table.comment}-分页列表查询", notes="$!{table.comment}-分页列表查询")
    @GetMapping(value = "/list")
    public Result<IPage<${entity}>> queryPageList(${entity} ${table.entityPath},
    @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
    @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
            HttpServletRequest req) {
            QueryWrapper<${entity}> queryWrapper = QueryGenerator.initQueryWrapper(${table.entityPath}, req.getParameterMap());
            Page<${entity}> page = new Page<${entity}>(pageNo, pageSize);
            IPage<${entity}> pageList = ${table.entityPath}Service.page(page, queryWrapper);
            return Result.OK(pageList);
    }

    /**
     *   添加
     *
     * @param ${table.entityPath}
     * @return
     */
    ##  @AutoLog(value = "${tableVo.ftlDescription}-添加")
    @ApiOperation(value="${table.comment}-添加", notes="${table.comment}-添加")
    //@RequiresPermissions("${entityPackage}:${tableName}:add")
    @PostMapping(value = "/add")
    public Result<String> add(@RequestBody ${entity} ${table.entityPath}) {
        ${table.entityPath}Service.save(${table.entityPath});
        return Result.OK("添加成功！");
    }

    /**
     *  编辑
     *
     * @param ${table.entityPath}
     * @return
     */
##        @AutoLog(value = "${tableVo.ftlDescription}-编辑")
    @ApiOperation(value="$!{table.comment}-编辑", notes="$!{table.comment}-编辑")
    //@RequiresPermissions("${entityPackage}:${tableName}:edit")
    @RequestMapping(value = "/edit", method = {RequestMethod.PUT,RequestMethod.POST})
    public Result<String> edit(@RequestBody ${entity} ${table.entityPath}) {
        ${table.entityPath}Service.updateById(${table.entityPath});
        return Result.OK("编辑成功!");
    }

    /**
     *   通过id删除
     *
     * @param id
     * @return
     */
##        @AutoLog(value = "${tableVo.ftlDescription}-通过id删除")
    @ApiOperation(value="$!{table.comment}-通过id删除", notes="$!{table.comment}-通过id删除")
    //@RequiresPermissions("${entityPackage}:${tableName}:delete")
    @DeleteMapping(value = "/delete")
    public Result<String> delete(@RequestParam(name="id",required=true) String id) {
        ${table.entityPath}Service.removeById(id);
        return Result.OK("删除成功!");
    }

    /**
     *  批量删除
     *
     * @param ids
     * @return
     */
    ##  @AutoLog(value = "${tableVo.ftlDescription}-批量删除")
    @ApiOperation(value="$!{table.comment}-批量删除", notes="$!{table.comment}-批量删除")
    //@RequiresPermissions("${entityPackage}:${tableName}:deleteBatch")
    @DeleteMapping(value = "/deleteBatch")
    public Result<String> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
        this.${table.entityPath}Service.removeByIds(Arrays.asList(ids.split(",")));
        return Result.OK("批量删除成功!");
    }

    /**
     * 通过id查询
     *
     * @param id
     * @return
     */
    //@AutoLog(value = "$!{table.comment}-通过id查询")
    @ApiOperation(value="$!{table.comment}-通过id查询", notes="$!{table.comment}-通过id查询")
    @GetMapping(value = "/queryById")
    public Result<Object> queryById(@RequestParam(name="id",required=true) String id) {
        ${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
        if(${table.entityPath} == null) {
            return Result.error("未找到对应数据");
        }
        return Result.OK(${table.entityPath});
    }

    /**
    * 导出excel
    *
    * @param request
    * @param ${entity}
    */
    @RequestMapping(value = "/exportXls")
    public ModelAndView exportXls(HttpServletRequest request, ${entity} ${table.entityPath}) {
            return super.exportXls(request, ${table.entityPath}, ${entity}.class, "$!{table.comment}");
    }

    /**
    * 通过excel导入数据
    *
    * @param request
    * @param response
    * @return
    */
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
            return super.importExcel(request, response, ${entity}.class);
    }

}
#end
